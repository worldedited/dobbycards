# alembic.ini
"""
[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
timezone = UTC

# max length of characters to apply to the "slug" field
truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
sourceless = false

# version location specification
version_locations = %(here)s/versions

# the output encoding used when revision files
# are written from script.py.mako
output_encoding = utf-8

sqlalchemy.url = postgresql://user:pass@localhost/dbname

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
"""

# migrations/env.py
"""
Alembic environment configuration
"""

from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context
import os
import sys
from pathlib import Path

# Add parent directory to path
sys.path.append(str(Path(__file__).parent.parent))

from models import Base

# this is the Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Add model's MetaData object for 'autogenerate' support
target_metadata = Base.metadata

# Get database URL from environment
def get_url():
    return os.getenv("DATABASE_URL", config.get_main_option("sqlalchemy.url"))


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    configuration = config.get_section(config.config_ini_section)
    configuration['sqlalchemy.url'] = get_url()
    
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, 
            target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


# migrations/versions/001_initial_schema.py
"""
Initial database schema

Revision ID: 001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Create initial tables"""
    
    # Create users table
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('telegram_id', sa.BigInteger(), nullable=False),
        sa.Column('username', sa.String(length=100), nullable=True),
        sa.Column('first_name', sa.String(length=100), nullable=True),
        sa.Column('last_name', sa.String(length=100), nullable=True),
        sa.Column('language_code', sa.String(length=10), nullable=True),
        sa.Column('is_premium', sa.Boolean(), default=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('last_active', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('telegram_id')
    )
    
    op.create_index('ix_users_telegram_id', 'users', ['telegram_id'])
    op.create_index('ix_users_created_at', 'users', ['created_at'])
    
    # Create words table
    op.create_table('words',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('word', sa.String(length=100), nullable=False),
        sa.Column('translation', sa.String(length=200), nullable=True),
        sa.Column('pronunciation', sa.String(length=100), nullable=True),
        sa.Column('example', sa.Text(), nullable=True),
        sa.Column('example_translation', sa.Text(), nullable=True),
        sa.Column('learned', sa.Boolean(), default=False),
        sa.Column('difficulty', sa.Integer(), default=0),
        sa.Column('review_count', sa.Integer(), default=0),
        sa.Column('correct_count', sa.Integer(), default=0),
        sa.Column('last_reviewed', sa.DateTime(), nullable=True),
        sa.Column('next_review', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_index('ix_words_user_id', 'words', ['user_id'])
    op.create_index('ix_words_learned', 'words', ['learned'])
    op.create_index('ix_words_next_review', 'words', ['next_review'])
    op.create_index('ix_words_word', 'words', ['word'])
    
    # Create translation_cache table
    op.create_table('translation_cache',
        sa.Column('word', sa.String(length=100), nullable=False),
        sa.Column('translation', sa.String(length=200), nullable=True),
        sa.Column('pronunciation', sa.String(length=100), nullable=True),
        sa.Column('example', sa.Text(), nullable=True),
        sa.Column('example_translation', sa.Text(), nullable=True),
        sa.Column('source', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('hit_count', sa.Integer(), default=0),
        sa.PrimaryKeyConstraint('word')
    )
    
    op.create_index('ix_translation_cache_created_at', 'translation_cache', ['created_at'])
    
    # Create user_statistics table
    op.create_table('user_statistics',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('words_learned', sa.Integer(), default=0),
        sa.Column('words_reviewed', sa.Integer(), default=0),
        sa.Column('correct_answers', sa.Integer(), default=0),
        sa.Column('wrong_answers', sa.Integer(), default=0),
        sa.Column('streak_count', sa.Integer(), default=0),
        sa.Column('study_time_minutes', sa.Integer(), default=0),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'date', name='uq_user_date')
    )
    
    op.create_index('ix_user_statistics_user_id', 'user_statistics', ['user_id'])
    op.create_index('ix_user_statistics_date', 'user_statistics', ['date'])
    
    # Create achievements table
    op.create_table('achievements',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.String(length=200), nullable=True),
        sa.Column('icon', sa.String(length=10), nullable=True),
        sa.Column('requirement_type', sa.String(length=50), nullable=False),
        sa.Column('requirement_value', sa.Integer(), nullable=False),
        sa.Column('points', sa.Integer(), default=10),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    
    # Create user_achievements table
    op.create_table('user_achievements',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('achievement_id', sa.Integer(), nullable=False),
        sa.Column('earned_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'achievement_id', name='uq_user_achievement')
    )
    
    # Create word_categories table
    op.create_table('word_categories',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.String(length=200), nullable=True),
        sa.Column('icon', sa.String(length=10), nullable=True),
        sa.Column('color', sa.String(length=7), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    
    # Create word_category_mapping table
    op.create_table('word_category_mapping',
        sa.Column('word_id', sa.Integer(), nullable=False),
        sa.Column('category_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['word_id'], ['words.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['category_id'], ['word_categories.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('word_id', 'category_id')
    )
    
    # Insert default achievements
    op.bulk_insert(
        sa.table('achievements',
            sa.column('name'),
            sa.column('description'),
            sa.column('icon'),
            sa.column('requirement_type'),
            sa.column('requirement_value'),
            sa.column('points')
        ),
        [
            {'name': 'First Word', 'description': 'Learn your first word', 'icon': '🎯', 
             'requirement_type': 'words_learned', 'requirement_value': 1, 'points': 10},
            {'name': 'Decade', 'description': 'Learn 10 words', 'icon': '📚', 
             'requirement_type': 'words_learned', 'requirement_value': 10, 'points': 25},
            {'name': 'Quarter Century', 'description': 'Learn 25 words', 'icon': '🎓', 
             'requirement_type': 'words_learned', 'requirement_value': 25, 'points': 50},
            {'name': 'Half Century', 'description': 'Learn 50 words', 'icon': '🏆', 
             'requirement_type': 'words_learned', 'requirement_value': 50, 'points': 100},
            {'name': 'Centurion', 'description': 'Learn 100 words', 'icon': '👑', 
             'requirement_type': 'words_learned', 'requirement_value': 100, 'points': 200},
            {'name': 'Week Streak', 'description': '7 day streak', 'icon': '🔥', 
             'requirement_type': 'streak', 'requirement_value': 7, 'points': 50},
            {'name': 'Month Streak', 'description': '30 day streak', 'icon': '💎', 
             'requirement_type': 'streak', 'requirement_value': 30, 'points': 200},
        ]
    )
    
    # Insert default categories
    op.bulk_insert(
        sa.table('word_categories',
            sa.column('name'),
            sa.column('description'),
            sa.column('icon'),
            sa.column('color')
        ),
        [
            {'name': 'Basic', 'description': 'Common everyday words', 'icon': '📝', 'color': '#667eea'},
            {'name': 'Business', 'description': 'Business vocabulary', 'icon': '💼', 'color': '#4a5568'},
            {'name': 'Travel', 'description': 'Travel and tourism', 'icon': '✈️', 'color': '#48bb78'},
            {'name': 'Technology', 'description': 'Tech and IT terms', 'icon': '💻', 'color': '#0bc5ea'},
            {'name': 'Food', 'description': 'Food and cooking', 'icon': '🍽️', 'color': '#ed8936'},
            {'name': 'Academic', 'description': 'Academic vocabulary', 'icon': '🎓', 'color': '#9f7aea'},
        ]
    )


def downgrade() -> None:
    """Drop all tables"""
    op.drop_table('word_category_mapping')
    op.drop_table('word_categories')
    op.drop_table('user_achievements')
    op.drop_table('achievements')
    op.drop_table('user_statistics')
    op.drop_table('translation_cache')
    op.drop_table('words')
    op.drop_table('users')


# migrations/versions/002_add_spaced_repetition.py
"""
Add spaced repetition algorithm fields

Revision ID: 002
Revises: 001
Create Date: 2024-01-02 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa

revision = '002'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Add SRS fields to words table"""
    
    # Add spaced repetition fields
    op.add_column('words', 
        sa.Column('easiness_factor', sa.Float(), default=2.5))
    op.add_column('words', 
        sa.Column('repetition_interval', sa.Integer(), default=1))
    op.add_column('words', 
        sa.Column('repetition_count', sa.Integer(), default=0))
    op.add_column('words', 
        sa.Column('quality_score', sa.Float(), default=0.0))
    
    # Add user preferences table
    op.create_table('user_preferences',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('daily_goal', sa.Integer(), default=10),
        sa.Column('notification_enabled', sa.Boolean(), default=True),
        sa.Column('notification_time', sa.Time(), nullable=True),
        sa.Column('theme', sa.String(length=20), default='light'),
        sa.Column('sound_enabled', sa.Boolean(), default=True),
        sa.Column('autoflip_enabled', sa.Boolean(), default=False),
        sa.Column('review_algorithm', sa.String(length=20), default='sm2'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )


def downgrade() -> None:
    """Remove SRS fields"""
    op.drop_column('words', 'easiness_factor')
    op.drop_column('words', 'repetition_interval')
    op.drop_column('words', 'repetition_count')
    op.drop_column('words', 'quality_score')
    op.drop_table('user_preferences')


# migrations/versions/003_add_audio_support.py
"""
Add audio pronunciation support

Revision ID: 003
Revises: 002
Create Date: 2024-01-03 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa

revision = '003'
down_revision = '002'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Add audio fields"""
    
    # Add audio pronunciation URL
    op.add_column('words', 
        sa.Column('audio_url', sa.String(length=500), nullable=True))
    
    # Add native audio support
    op.add_column('translation_cache', 
        sa.Column('audio_url', sa.String(length=500), nullable=True))
    
    # Create audio_files table for cached audio
    op.create_table('audio_files',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('word', sa.String(length=100), nullable=False),
        sa.Column('language', sa.String(length=10), default='en'),
        sa.Column('voice', sa.String(length=50), nullable=True),
        sa.Column('file_path', sa.String(length=500), nullable=True),
        sa.Column('url', sa.String(length=500), nullable=True),
        sa.Column('duration_ms', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('word', 'language', 'voice', name='uq_word_lang_voice')
    )


def downgrade() -> None:
    """Remove audio support"""
    op.drop_column('words', 'audio_url')
    op.drop_column('translation_cache', 'audio_url')
    op.drop_table('audio_files')


# migrate.py
"""
Database migration management script
"""

import os
import sys
import argparse
from alembic import command
from alembic.config import Config
from sqlalchemy import create_engine, text
from pathlib import Path


class MigrationManager:
    """Manage database migrations"""
    
    def __init__(self, database_url=None):
        self.database_url = database_url or os.getenv('DATABASE_URL', 'sqlite:///flashcards.db')
        self.alembic_cfg = Config("alembic.ini")
        self.alembic_cfg.set_main_option("sqlalchemy.url", self.database_url)
    
    def init(self):
        """Initialize migrations"""
        command.init(self.alembic_cfg, "migrations")
        print("✅ Migrations initialized")
    
    def create(self, message):
        """Create a new migration"""
        command.revision(self.alembic_cfg, message=message, autogenerate=True)
        print(f"✅ Migration created: {message}")
    
    def upgrade(self, revision="head"):
        """Upgrade database to a revision"""
        command.upgrade(self.alembic_cfg, revision)
        print(f"✅ Database upgraded to {revision}")
    
    def downgrade(self, revision):
        """Downgrade database to a revision"""
        command.downgrade(self.alembic_cfg, revision)
        print(f"✅ Database downgraded to {revision}")
    
    def current(self):
        """Show current revision"""
        command.current(self.alembic_cfg)
    
    def history(self):
        """Show migration history"""
        command.history(self.alembic_cfg)
    
    def stamp(self, revision):
        """Stamp database with a revision"""
        command.stamp(self.alembic_cfg, revision)
        print(f"✅ Database stamped with {revision}")
    
    def check_connection(self):
        """Check database connection"""
        try:
            engine = create_engine(self.database_url)
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                print("✅ Database connection successful")
                return True
        except Exception as e:
            print(f"❌ Database connection failed: {e}")
            return False
    
    def create_backup(self, backup_path=None):
        """Create database backup"""
        if not backup_path:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"backup_{timestamp}.sql"
        
        if 'postgresql' in self.database_url:
            os.system(f"pg_dump {self.database_url} > {backup_path}")
        elif 'sqlite' in self.database_url:
            import shutil
            db_path = self.database_url.replace('sqlite:///', '')
            shutil.copy(db_path, backup_path)
        
        print(f"✅ Backup created: {backup_path}")
        return backup_path
    
    def restore_backup(self, backup_path):
        """Restore database from backup"""
        if not os.path.exists(backup_path):
            print(f"❌ Backup file not found: {backup_path}")
            return False
        
        if 'postgresql' in self.database_url:
            os.system(f"psql {self.database_url} < {backup_path}")
        elif 'sqlite' in self.database_url:
            import shutil
            db_path = self.database_url.replace('sqlite:///', '')
            shutil.copy(backup_path, db_path)
        
        print(f"✅ Database restored from: {backup_path}")
        return True


def main():
    """CLI for migration management"""
    parser = argparse.ArgumentParser(description='Database Migration Manager')
    parser.add_argument('command', choices=[
        'init', 'create', 'upgrade', 'downgrade', 
        'current', 'history', 'check', 'backup', 'restore'
    ])
    parser.add_argument('-m', '--message', help='Migration message')
    parser.add_argument('-r', '--revision', help='Target revision')
    parser.add_argument('-f', '--file', help='Backup file path')
    parser.add_argument('-d', '--database', help='Database URL')
    
    args = parser.parse_args()
    
    manager = MigrationManager(args.database)
    
    if args.command == 'init':
        manager.init()
    elif args.command == 'create':
        if not args.message:
            print("❌ Message required for create command")
            sys.exit(1)
        manager.create(args.message)
    elif args.command == 'upgrade':
        manager.upgrade(args.revision or 'head')
    elif args.command == 'downgrade':
        if not args.revision:
            print("❌ Revision required for downgrade command")
            sys.exit(1)
        manager.downgrade(args.revision)
    elif args.command == 'current':
        manager.current()
    elif args.command == 'history':
        manager.history()
    elif args.command == 'check':
        manager.check_connection()
    elif args.command == 'backup':
        manager.create_backup(args.file)
    elif args.command == 'restore':
        if not args.file:
            print("❌ File path required for restore command")
            sys.exit(1)
        manager.restore_backup(args.file)


if __name__ == '__main__':
    main()